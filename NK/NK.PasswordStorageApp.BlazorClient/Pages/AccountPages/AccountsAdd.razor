@page "/accounts/add"
@using NK.PasswordStorageApp.Domain.Dtos
@using NK.PasswordStorageApp.Domain.Enums
@using System.Net
@inject DialogService DialogService
@inject HttpClient HttpClient
@inject IToastService ToastService
@inject NavigationManager NavigationManager

<h3>AccountsAdd</h3>

<RadzenTemplateForm Data="@createDto" Submit="@((AccountCreateDto args) => SubmitAsync(args))">
    <RadzenRow Gap="2rem" class="rz-p-0 rz-p-lg-4">
        <RadzenColumn Size="12" SizeMD="12">
            <RadzenStack>
                <RadzenFieldset Text="Accounts Detail">
                    <RadzenStack Gap="1rem">
                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenLabel Text="Account Type" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="8">
                                <RadzenDropDown @bind-Value="createDto.Type" AllowClear="true" Placeholder="Please,select account type" Data="@accountTypes" Style="width: 100%;" />
                            </RadzenColumn>
                        </RadzenRow>
                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenLabel Text="Username" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="8">
                                <RadzenTextBox Style="width: 100%;" @bind-Value="createDto.Username" Placeholder="Please,enter your username" />
                            </RadzenColumn>
                        </RadzenRow>
                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenLabel Text="Password" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="8">
                                <RadzenPassword Style="width: 100%;" @bind-Value="createDto.Password" Placeholder="Please,enter your password" />
                            </RadzenColumn>
                        </RadzenRow>
                    </RadzenStack>
                </RadzenFieldset>
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" class="rz-mt-8 rz-mb-4">
        <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Large" Icon="save" Text="Save" />
        <RadzenButton ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Large" Icon="cancel" Text="Cancel" Click="@Cancel" />
    </RadzenStack>
</RadzenTemplateForm>


@code {
    [Parameter]
    public bool IsDialog { get; set; } = false;

    private AccountCreateDto createDto = new();

    private IEnumerable<AccountType> accountTypes = Enum.GetValues<AccountType>();

    private async Task SubmitAsync(AccountCreateDto acDto)
    {
        var response = await HttpClient.PostAsJsonAsync("Accounts", createDto);

        if (response.IsSuccessStatusCode)
        {
            ToastService.Success("The account saved successfully.", "Save");

            if (IsDialog)
                DialogService.Close(true);

            else
                NavigationManager.NavigateTo("/accounts");

        }
        else
        {
            if (response.StatusCode == HttpStatusCode.BadRequest || response.StatusCode == HttpStatusCode.NotFound)
            {
                ToastService.Warning("Please, check the form.", "Warning");
            }
            else
            {
                ToastService.Error("The account not saved!", "Error");
            }
        }
    }

    private void Cancel()
    {
        if(IsDialog)
            DialogService.Close(false);

            else
            NavigationManager.NavigateTo("/accounts");
    }
}
