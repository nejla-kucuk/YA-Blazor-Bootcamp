@page "/"
@using System.Text
@using NK.BlazorWasmStarter.Enums

<PageTitle>Home</PageTitle>

<div class="card">
	<div class="card-body">


		<div class="input-group mb-3">
			<input @bind="password" readonly="readonly" type="text" class="form-control">
			<span @onmouseenter="@(() => OnEmojiHover("copy"))" @onmouseleave="@OnEmojiMouseLeave" class="input-group-text my-clickable-button @onHoverCopyCss" id="basic-addon2">📄</span>
			<span @onclick="HandleGeneratePasswordClick" @onmouseenter="@(() => OnEmojiHover("generate"))" @onmouseleave="@OnEmojiMouseLeave" class="input-group-text my-clickable-button @onHoverGenerateCss" id="basic-addon3">🔄</span>
			<span @onclick="HandleSavePasswordClick" @onmouseenter="@(() => OnEmojiHover("save"))" @onmouseleave="@OnEmojiMouseLeave" class="input-group-text my-clickable-button @onHoverSaveCss" id="basic-addon4">💾</span>
		</div>

		<div class="mb-3">
			<div class="form-check form-check-inline">
				<input class="form-check-input" type="checkbox" id="inlineCheckbox1" @bind="@includeNumbers" @oninput="@((args) => HandleCheckBoxOnChange(args,CheckBoxActionType.Numbers))">
				<label class="form-check-label" for="inlineCheckbox1">Numbers</label>
			</div>
			<div class="form-check form-check-inline">
				<input class="form-check-input" type="checkbox" id="inlineCheckbox2" @bind="@includeLowercase" @oninput="@((args) => HandleCheckBoxOnChange(args,CheckBoxActionType.Lowercase))">
				<label class="form-check-label" for="inlineCheckbox2">Lowercase</label>
			</div>
			<div class="form-check form-check-inline">
				<input class="form-check-input" type="checkbox" id="inlineCheckbox3" @bind="@includeUppercase" @oninput="@((args) => HandleCheckBoxOnChange(args,CheckBoxActionType.Uppercase))">
				<label class="form-check-label" for="inlineCheckbox3">Uppercase</label>
			</div>
			<div class="form-check form-check-inline">
				<input class="form-check-input" type="checkbox" id="inlineCheckbox4" @bind="@includeSpecialChars" @oninput="@((args) => HandleCheckBoxOnChange(args,CheckBoxActionType.SpecialChars))">
				<label class="form-check-label" for="inlineCheckbox4">Special Chars</label>
			</div>
		</div>

		<div>
			<p class="mb-1 mt-3">Password Length: <b>@passwordLenght</b></p>

			<input type="range" class="form-range" step="1" min="8" max="50" @bind="passwordLenght" @bind:event="oninput" />
		</div>
	</div>
</div>


<div class="card">
	<div class="card-header">
		💾 Saved Passwords
	</div>

	<div class="card-body">
		<ul class="list-group mt-3">
			@foreach(var savedPassword in savedPasswords)
			{
				<li class="list-group-item">@savedPassword</li>
			}
		</ul>
	</div>
	
</div>


@code {
	private string password = string.Empty;
	private int passwordLenght = 12;
	private HashSet<String> savedPasswords = [];


	private string onHoverCopyCss = string.Empty;
	private string onHoverGenerateCss = string.Empty;
	private string onHoverSaveCss = string.Empty;

	private static Random random = new Random();
	private static StringBuilder stringBuilder = new StringBuilder();

	private bool includeLowercase = true;
	private bool includeUppercase = true;
	private bool includeNumbers = true;
	private bool includeSpecialChars = true;

	private const string lowercaseLetters = "abcdefghijklmnopqrstuvwxyz";
	private const string uppercaseLetters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	private const string numbers = "0123456789";
	private const string specialCharacters = "!@#$%&*()_+-={};:?";

	private void HandleSavePasswordClick()
	{
		if (string.IsNullOrEmpty(password) || savedPasswords.Any(x=> x==password))
			return;


		savedPasswords.Add(password);

	}

	protected override void OnInitialized()
	{
		GeneratePassword();

		base.OnInitialized();
	}

	private void HandleCheckBoxOnChange(ChangeEventArgs args, CheckBoxActionType actionType)
	{
		if (args.Value is null)
			return;

		var result = actionType switch
		{
			CheckBoxActionType.SpecialChars => includeSpecialChars = (bool)args.Value,
			CheckBoxActionType.Numbers => includeNumbers = (bool)args.Value,
			CheckBoxActionType.Uppercase => includeUppercase = (bool)args.Value,
			CheckBoxActionType.Lowercase => includeLowercase = (bool)args.Value,
			_ => throw new ArgumentException("Geçersiz CheckBoxActionType", nameof(actionType))
		};

		GeneratePassword();
	}  

	private void HandleGeneratePasswordClick()
	{
		GeneratePassword();
	}


	private void GeneratePassword()
	{
		stringBuilder.Clear();

		var validChars = new StringBuilder();

		if (includeLowercase)
			validChars.Append(lowercaseLetters);

		if (includeUppercase)
			validChars.Append(uppercaseLetters);

		if (includeNumbers)
			validChars.Append(numbers);

		if (includeSpecialChars)
			validChars.Append(specialCharacters);


		if (!includeUppercase && !includeLowercase && !includeNumbers && !includeSpecialChars)
		{
			includeNumbers = true;
			validChars.Append(numbers);
		
		}
			

		for (int i = 0; i < passwordLenght; i++)
		{
			var randomIndex = random.Next(0, validChars.Length);

			stringBuilder.Append(validChars[randomIndex]);
		}

		password = stringBuilder.ToString();
	}


	private void OnEmojiHover(string iconType)
	{
		switch (iconType)
		{
			case "copy":
				onHoverCopyCss = "bg-secondary";
				break;


			case "generate":
				onHoverGenerateCss = "bg-secondary";
				break;


			case "save":
				onHoverSaveCss = "bg-secondary";
				break;


			default:

				break;
		}
	}

	private void OnEmojiMouseLeave()
	{
		onHoverCopyCss = string.Empty;
		onHoverGenerateCss = string.Empty;
		onHoverSaveCss = string.Empty;
	}
}
